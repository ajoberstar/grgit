plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.1'
    id 'org.ajoberstar.defaults' version '0.6.0-milestone.7'
    id 'org.sonarqube' version '1.2'
}

group = 'org.ajoberstar'
description = 'The Groovy way to use Git.'

defaults {
    id = 'ajoberstar'

    bintrayRepo = 'libraries'
    bintrayLabels = ['groovy', 'git']

    developers = [
        [id: 'ajoberstar', name: 'Andrew Oberstar', email: 'andrew@ajoberstar.org']
    ]

    copyrightYears = '2012-2015'
}

sourceCompatibility = '1.7'

repositories {
    mavenCentral()
}

def jgitVersion = '4.5.0.201609210915-r'
// def jgitVersion = '3.3.2.201404171909-r' // pre-bug
// def jgitVersion = '3.4.1.201406201815-r' // behavior of log command is different

dependencies {
    // groovy
    compileOnly 'org.codehaus.groovy:groovy-all:2.4.5'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.5'

    // jgit
    compile "org.eclipse.jgit:org.eclipse.jgit:$jgitVersion"
    compile "org.eclipse.jgit:org.eclipse.jgit.ui:$jgitVersion"

    // agentproxy
    ['jsch', 'pageant', 'sshagent', 'usocket-jna', 'usocket-nc'].each {
        compile "com.jcraft:jsch.agentproxy.${it}:0.0.9"
    }
    // agentproxy pulls this in, but we need to force a newer version
    compile 'com.jcraft:jsch:0.1.54'

    // logging
    compile 'org.slf4j:slf4j-api:1.7.21'
    testRuntime 'org.slf4j:slf4j-simple:1.7.21'

    // testing
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') { exclude group: 'org.codehaus.groovy' }
}

tasks.withType(Test) {
    reports {
        junitXml.outputPerTestCase = true
    }
}

test {
    useJUnit {
        excludeCategories 'org.ajoberstar.grgit.fixtures.PlatformSpecific'
    }
}

['Windows', 'Linux', 'Mac'].each { platform ->
    tasks.create("test${platform}", Test) {
        useJUnit {
            includeCategories "org.ajoberstar.grgit.fixtures.${platform}Specific"
        }
        System.properties.each { key, value ->
            if (key.startsWith('org.ajoberstar.grgit.test')) {
                systemProperties((key): value)
            }
        }
    }
}

sonarqube {
    properties {
        property 'sonar.projectVersion', version.toString().split('-')[0]
    }
}
